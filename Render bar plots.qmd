---
title: "Render bar plots"
author: "Joel Barnes"
date: "`r Sys.time()`"
date-format: "MMM D, YYYY @ HH:mm:ss"
format: 
  html:
    page-layout: full
    toc: true
    toc-location: left
    embed-resources: true
editor: source
execute:
  warning: false
  message: false
---

## Dependencies

```{r, `code-line-numbers` = 1}
# Import dependencies
library(dplyr)
library(effectsize)
library(ggplot2)
library(ggpubr)
library(ggtext)
library(stringr)
library(tidyr)
library(viridis)
```

## User-defined functions

```{r, `code-line-numbers` = 1}
# This function renders a bar plot...with many options
render_barplot <- function(
  items, 
  plot_width = NULL,
  plot_height = NULL,
  plot_font_face = "Roboto",
  plot_title = "",
  plot_title_font_size = 10,
  legend_position = c("top", "right", "bottom", "left", "none")[3],
  legend_font_size = 10,
  bar_transparency = 0.7,
  color_palette = viridis(15),
  show_grid_lines = TRUE,
  show_axis_lines = FALSE,
  show_x_axis = FALSE,
  show_y_axis = FALSE,
  x_axis_label = "",
  y_axis_label = "",
  y_axis_breaks = 5,
  axis_text_font_size = 10,
  label_font_size = 2.5,
  label_wrap_size = 20,
  label_color = "#434343",
  error_bar_size = 0.05,
  data_label_position = 2.5,
  decimals = 1,
  test = c("anova", "chi-square", "lm")[3], 
  alpha_level = 0.05,
  effect_size_threshold = 0.1,
  ...
) {
  
  # Get optional arguments
  options <- list(...)
  
  # Check whether optional arguments are set and update arguments based on user selections
  if(is.character(options$item_labels)) names(items) <- options$item_labels
  if(is.numeric(plot_width) & is.numeric(plot_height)) options(repr.plot.width = plot_width, repr.plot.height = plot_height)
  if(isTRUE(show_grid_lines)) show_grid_lines <- element_line() else show_grid_lines <- element_blank()
  if(isTRUE(show_axis_lines)) show_axis_lines <- element_line(color = "#efefef") else show_axis_lines <- element_blank()
  if(isFALSE(show_x_axis)) x_axis_text <- element_blank() else x_axis_text <- element_text(color = label_color, size = axis_text_font_size)
  if(isFALSE(show_y_axis)) y_axis_text <- element_blank() else y_axis_text <- element_text(color = label_color, size = axis_text_font_size)
  if(is.vector(options$grouping_variable %>% unlist)) grouping_variable <- options$grouping_variable
  if(is.numeric(data_label_position)) data_label_position <- data_label_position * -1
  
  get_anova <- function(x, alpha_level = 0.05) {
    
    vector_order <- names(x)
      
    # Reshape data
    x <- x %>%
      pivot_longer(cols = names(.)) %>%
      mutate(
        name = factor(
          x = name,
          levels = vector_order
        )
      ) %>%
      arrange(name)
    
    # Create empty tibble
    df <- tibble()

    # Iterate unique predictor values
    for(level in unique(x$name)) {
      
      # Fit model
      model <- lm(value ~ 1, data = x %>% filter(name == level))
      
      # Add model stats and CIs
      df <- bind_rows(
        df,
        tibble(
            item = level,
            level = level,
            mean = round(model$coefficients %>% as.vector, decimals),
            sd = sd(x$value[x$name == level]),
            ci_lower = confint(model)[1,1],
            ci_upper = confint(model)[1,2]
        )
      ) %>%
        mutate(
          letter = letters[1:length(level)],
          stat_sig = ""
        ) %>%
        relocate(letter, .after = level)
      
    }
    
    df <- df %>%
      mutate(
        item = factor(
          x = item,
          levels = vector_order
        )
      )
    
    # Fit model
    model <- lm(value ~ name, data = x)
    
    # Run ANOVA/post-hoc tests
    anova <- TukeyHSD(
      x = aov(model),
      ordered = TRUE
    )
    
    # Reshape anova to data frame
    anova <- bind_cols(
      test = row.names(anova$name),
      anova$name
    ) %>%
      rowwise() %>%
      mutate(
        variable1 = strsplit(test, "-")[[1]][1],
        variable2 = strsplit(test, "-")[[1]][2]
      )
    
    # Get post-hoc test combinations
    post_hoc_tests <- combn(
      x = df$level,
      m = 2
    ) %>% 
      t %>%
      as_tibble %>%
      rename(variable1 = V1, variable2 = V2) %>%
      mutate(
        combo1 = paste0(variable1, "-", variable2),
        combo2 = paste0(variable2, "-", variable1)
      )
    
    # Iterate post-hoc tests
    for(i in 1:nrow(post_hoc_tests)) {
      
      # Find corresponding row in anova
      row <- which(post_hoc_tests$combo1[i] == anova$test | post_hoc_tests$combo2[i] == anova$test)
      
      # Check if stat sig
      if(anova$`p adj`[row] <= alpha_level) {
        
        df$stat_sig[df$level == post_hoc_tests$variable1[i]] <- paste0(
          c(
            strsplit(df$stat_sig[df$level == post_hoc_tests$variable1[i]], ",")[[1]],
            df$letter[df$level == post_hoc_tests$variable2[i]]
          ), 
          collapse = ","
        )
        
        df$stat_sig[df$level == post_hoc_tests$variable2[i]] <- paste0(
          c(
            strsplit(df$stat_sig[df$level == post_hoc_tests$variable2[i]], ",")[[1]],
            df$letter[df$level == post_hoc_tests$variable1[i]]
          ), 
          collapse = ","
        )
        
      }
      
    }
    
    df <- df %>% mutate(stat_sig = paste0(" ", stat_sig))
    
    return(df)
    
  }

  # This function fits an lm model and computes means for a numeric vector that is grouped by another vector
  get_means <- function(response, response_label, predictor, alpha_level = 0.05, effect_size_threshold = 0.1) {

    # Create tibble
    x <- tibble(response = response, predictor = predictor)

    # Create empty tibble
    df <- tibble()

    # Iterate unique predictor values
    for(level in unique(x$predictor)) {
      
      # Fit model
      model <- lm(response ~ 1, data = x %>% filter(predictor == level))
      
      # Add model stats and CIs
      df <- bind_rows(
        df,
        tibble(
            level = level,
            mean = round(model$coefficients %>% as.vector, decimals),
            sd = sd(x$response[x$predictor == level]),
            ci_lower = confint(model)[1,1],
            ci_upper = confint(model)[1,2]
        )
      )
      
    }
    
    # Add vectors
    df <- df %>%
      mutate(
        item = !! response_label,
        stat_sig = ""
      ) %>%
      relocate(item, .before = level)

    # Fit model and get p
    model <- lm(response ~ predictor, data = x)
    p <- summary(model)$coefficients[2,4]
    
    # Compute effect size
    effect_size <- cohens_d(response ~ predictor, data = x)$Cohens_d %>% abs
    
    # If stat sig
    if(p <= alpha_level & effect_size >= effect_size_threshold) df$stat_sig[1] <- "*"

    return(df)
    
}

  # This function runs a chi-square goodness of fit test and computes props for a nominal vector
  get_props <- function(x, label, alpha_level = 0.05) {
    
    # Run Chi-square goodness of fit test
    test <- chisq.test(
      x = x %>%
        table %>% 
        unname
    )
    
    # Compute props
    props <- x %>% 
      table %>%
      prop.table %>%
      as_tibble %>%
      rename(level = ".", prop = n) %>%
      mutate(
        item = label,
        n = x %>%
          table %>%
          unname,
        error = sqrt((prop * (1 - prop)) / n) * 100,
        prop = round(prop * 100, decimals),
        ci_lower = prop - error,
        ci_upper = prop + error,
        stat_sig = ""
      ) %>%
      relocate(item, .before = level) %>%
      rename(mean = prop)
    
    # If stat sig
    if(test$p.value <= alpha_level) {
      
      # Identify prop with largest residual
      largest_residual <- which(abs(test$residuals) == max(abs(test$residuals)))
      
      # Add asterisk to stat_sig vector row with largest residual
      props$stat_sig[largest_residual] <- "*"
      
    }
    
    return(props)
    
  }

  # Wrap vector names if too long
  names(items) <- str_wrap(
    string = names(items),
    width = label_wrap_size
  )

  # Execute user-defined test
  if(test == "anova") {
    
    df <- get_anova(x = items, alpha_level = alpha_level)
    
  } else if(test == "chi-square") {
    
    df <- items %>%
      pivot_longer(cols = names(items)) %>%
      #group_by(name) %>%
      #dplyr::summarize(get_props(value, unique(name), alpha_level = alpha_level), .groups = "keep") %>%
      #ungroup() %>%
      reframe(get_props(value, unique(name), alpha_level = alpha_level), .by = name) %>%
      mutate(
        item = factor(
          x = item,
          levels = names(items)
        )
      )
    
  } else if(test == "lm") {
    
    names(grouping_variable) <- "grouping_variable"
    
    df <- bind_cols(items, grouping_variable) %>%
      pivot_longer(cols = names(items)) %>%
      #group_by(name) %>%
      #dplyr::summarize(get_means(value, grouping_variable, alpha_level = alpha_level), .groups = "keep") %>%
      #ungroup() %>%
      reframe(get_means(value, unique(name), grouping_variable, alpha_level = alpha_level, effect_size_threshold = effect_size_threshold), .by = name) %>%
      mutate(
        item = factor(
          x = item,
          levels = names(items)
        )
      )
    
  }

  if(is.character(options$item_options)) {
    
    df <- df %>%
      mutate(
        level = factor(
          x = level,
          levels = names(options$item_options),
          labels = options$item_options
        )
      )
    
  }
  
  if(is.vector(options$grouping_variable_options)) {
    
    df <- df %>%
      mutate(
        level = factor(
          x = level,
          levels = names(options$grouping_variable_options),
          labels = options$grouping_variable_options
        )
      )
    
  }
  
  # Tweak plot based on number of items passed into function
  if(ncol(items) > 1) {

    # Compute unique levels in df
    unique_levels <- length(unique(df$level))
    
    # Select the number of colors needed
    fill_colors <- color_palette[
      seq(
        from = 1, 
        to = length(color_palette), 
        by = floor(length(color_palette) / unique_levels)
      )[1:unique_levels]
    ]
    
    # Set mapping content
    mapping_content <- aes(
      x = item, 
      y = mean, 
      fill = level,
      label = paste0(
        format(
          x = mean, 
          nsmall = decimals
        ), 
        if_else(
          condition = test == "chi-square",
          true = "%",
          false = ""
        ), 
        stat_sig
      )
    )
      
  } else {
    
    # Select the number of colors needed
    fill_colors <- color_palette[
      seq(
        from = 1, 
        to = length(color_palette), 
        by = floor(length(color_palette) / nrow(df))
      )[1:nrow(df)]
    ]
    
    # Set mapping content
    mapping_content <- aes(
      x = level, 
      y = mean, 
      fill = level,
      label = paste0(
        format(
          x = mean, 
          nsmall = decimals
        ), 
        if_else(
          condition = test == "chi-square",
          true = "%",
          false = ""
        ), 
        stat_sig
      )
    )
    
    # Set plot title
    plot_title <- gsub("\n", " ", df$item[1])
    
  }
  
  # Render bar plot
  ggplot(
    data = df,
    mapping = mapping_content
  ) + 
    geom_bar(
      stat = "identity", 
      width = 0.5, 
      position = position_dodge(width = 0.6), 
      alpha = bar_transparency
    ) +
    geom_text(
      position = position_dodge(width = 0.6),
      aes(
        vjust = data_label_position, 
        y = ci_upper
      ), 
      size = label_font_size
    ) +
    geom_errorbar(
      aes(ymin = ci_lower, ymax = ci_upper),
      color = "#434343",
      width = error_bar_size,
      position = position_dodge(width = 0.6)
    ) + 
    scale_fill_manual(values = fill_colors) +
    scale_y_continuous(
      breaks = seq(from = 0, to = min(100, max(df$mean + 10)), by = y_axis_breaks), 
      limits = c(
        0, 
        ifelse(
          test = test %in% c("anova", "lm"),
          yes = max(df$mean) + max(df$sd),
          no = min(100, max(df$mean + 10))
        )
      )
    ) +
    labs(
      title = plot_title,
      x = x_axis_label, 
      y = y_axis_label,
      caption = if_else(
        condition = "*" %in% df$stat_sig,
        true = paste0(
          "&#42; <i>p</i> &le; ", 
          format(round(alpha_level, 2), nsmall = 2),
          if_else(
            condition = test == "lm",
            true = paste0(" and Cohen's <i>d</i> &#8805; ", effect_size_threshold),
            false = ""
          ),
          options$caption_title
        ),
        false = if_else(
          condition = sum(df$stat_sig == "") < nrow(df),
          true = paste0(
            "Letters denote Tukey's Honest Significant Difference tests where <i>p</i> &le; ",
            format(round(alpha_level, 2), nsmall = 2)
          ),
          false = ""
        )
      )
    ) +
    theme_minimal() +
    theme(
      text = element_text(family = options$plot_font_face),
      plot.title = element_text(size = plot_title_font_size, margin = margin(0, 0, plot_title_font_size * 2, 0)),
      axis.title.x = element_text(color = label_color, margin = margin(0, axis_text_font_size * 1.25, 0)),
      axis.title.y = element_text(size = axis_text_font_size, color = label_color, margin = margin(0, axis_text_font_size * 0.75, 0)),
      axis.text.x = x_axis_text,
      axis.text.y = y_axis_text,
      legend.position = legend_position,
      legend.margin = margin(0, 0, 0, 0),
      legend.title = element_blank(),
      legend.text = element_text(size = legend_font_size, color = label_color),
      plot.caption = element_markdown(size = label_font_size + 6, color = label_color, hjust = 0),
      panel.grid.major = show_grid_lines,
      panel.grid.minor = show_grid_lines,
      axis.line = show_axis_lines
    )
  
} 
```

## Fake data

```{r, `code-line-numbers` = 1}
# Create fake data
df <- tibble(
  `How are you doing today?` = sample(
    x = c("Agree", "Disagree", "Neutral"),
    size = 1000,
    replace = TRUE,
    prob = c(0.5, 0.2, 0.3)
  ),
  `Oh, I'm doing just dandy!` = sample(
    x = c("Agree", "Disagree", "Neutral"),
    size = 1000,
    replace = TRUE,
    prob = c(0.3, 0.27, 0.43)
  ),
  `Shut the front door!` = sample(
    x = c("Agree", "Disagree", "Neutral"),
    size = 1000,
    replace = TRUE,
    prob = c(0.32, 0.33, 0.35)
  ),
  Sex = sample(
    x = c(1:2),
    size = 1000,
    replace = TRUE,
    prob = c(0.51, 0.49)
  ),
  `Scale er from 1 to 5, bud` = sample(
    x = 1:5,
    size = 1000,
    replace = TRUE,
    prob = rep(0.2, 5)
  ),
  `Scale er from 1 to 10, kid` = sample(
    x = 1:10,
    size = 1000,
    replace = TRUE,
    prob = rep(0.1, 10)
  ),
  `Continuous 1` = rnorm(
    n = 1000,
    mean = 12.5,
    sd = 5.2
  ) %>% floor,
  `Continuous 2` = rnorm(
    n = 1000,
    mean = 25.2,
    sd = 9.1
  ) %>% floor,
  `Continuous 3` = rnorm(
    n = 1000,
    mean = 55.5,
    sd = 23.6
  ) %>% floor
)
```

## Props

### Bar plot (single item)

```{r, `code-line-numbers` = 1}
render_barplot(
  items = df %>% 
    select(`How are you doing today?`),
  plot_width = NULL,
  plot_height = NULL,
  plot_font_face = "Arial",
  plot_title = "",
  plot_title_font_size = 10,
  legend_position = "bottom",
  legend_font_size = 10,
  bar_transparency = 0.7,
  color_palette = c("#f8766d", "#00ba38", "#619cff"),
  show_grid_lines = FALSE,
  show_axis_lines = TRUE,
  show_x_axis = TRUE,
  show_y_axis = FALSE,
  x_axis_label = "",
  y_axis_label = "",
  y_axis_breaks = 5,
  axis_text_font_size = 10,
  label_font_size = 2.5,
  label_wrap_size = 20,
  label_color = "#434343",
  error_bar_size = 0.05,
  data_label_position = 2.5,
  decimals = 1,
  test = "chi-square", 
  alpha_level = 0.05
)
```

### Bar plot (multiple items)

```{r, `code-line-numbers` = 1}
render_barplot(
  items = df %>% 
    select(
      `How are you doing today?`, 
      `Oh, I'm doing just dandy!`, 
      `Shut the front door!`
    ),
  plot_width = NULL,
  plot_height = NULL,
  plot_font_face = "Arial",
  plot_title = "",
  plot_title_font_size = 10,
  legend_position = "bottom",
  legend_font_size = 10,
  bar_transparency = 1,
  show_grid_lines = TRUE,
  show_axis_lines = FALSE,
  show_x_axis = TRUE,
  show_y_axis = TRUE,
  x_axis_label = "",
  y_axis_label = "Proportion of respondents (%)",
  y_axis_breaks = 20,
  axis_text_font_size = 10,
  label_font_size = 2.5,
  label_wrap_size = 20,
  label_color = "#434343",
  error_bar_size = 0.05,
  data_label_position = 1,
  decimals = 1,
  test = "chi-square", 
  alpha_level = 0.05
)
```

## Means

### Bar plot (single item)

```{r, `code-line-numbers` = 1}
render_barplot(
  items = df %>% 
    select(
      `Scale er from 1 to 5, bud`,
      `Scale er from 1 to 10, kid`
    ),
  grouping_variable = df %>%
    select(Sex),
  grouping_variable_options = c(
    "1" = "Female",
    "2" = "Male"
  ),
  plot_width = NULL,
  plot_height = NULL,
  plot_font_face = "Arial",
  plot_title = "",
  plot_title_font_size = 10,
  legend_position = "bottom",
  legend_font_size = 10,
  bar_transparency = 0.7,
  color_palette = c("#f8766d", "#00ba38", "#619cff"),
  show_grid_lines = TRUE,
  show_axis_lines = FALSE,
  show_x_axis = TRUE,
  show_y_axis = TRUE,
  x_axis_label = "",
  y_axis_label = "Mean",
  y_axis_breaks = 5,
  axis_text_font_size = 10,
  label_font_size = 2.5,
  label_wrap_size = 20,
  label_color = "#434343",
  error_bar_size = 0.05,
  data_label_position = 1,
  decimals = 1,
  test = "lm", 
  alpha_level = 0.05,
  effect_size_threshold = 0.05
)
```

### Bar plot (multiple items)

```{r, `code-line-numbers` = 1}
render_barplot(
  items = df %>% 
    select(
      `Continuous 3`, 
      `Continuous 1`, 
      `Continuous 2`
    ),
  item_labels = c(
    "Continuous 3" = "400m sprint",
    "Continuous 1" = "100m sprint",
    "Continuous 2" = "200m sprint"
  ),
  plot_width = NULL,
  plot_height = NULL,
  plot_font_face = "Arial",
  plot_title = "",
  plot_title_font_size = 10,
  legend_position = "none",
  legend_font_size = 10,
  bar_transparency = 1,
  show_grid_lines = FALSE,
  show_axis_lines = TRUE,
  show_x_axis = TRUE,
  show_y_axis = FALSE,
  x_axis_label = "",
  y_axis_label = "Mean (seconds)",
  y_axis_breaks = 20,
  axis_text_font_size = 10,
  label_font_size = 2.5,
  label_wrap_size = 20,
  label_color = "#434343",
  error_bar_size = 0.05,
  data_label_position = 1,
  decimals = 1,
  test = "anova", 
  alpha_level = 0.05,
  effect_size_threshold = 0.1
)
```

## Grid plots

```{r, `code-line-numbers` = 1}
# Render plot and bind to object
plot1 <- render_barplot(
  items = df %>% 
    select(
      `Scale er from 1 to 5, bud`,
      `Scale er from 1 to 10, kid`
    ),
  grouping_variable = df %>%
    select(Sex),
  grouping_variable_options = c(
    "1" = "Female",
    "2" = "Male"
  ),
  plot_width = NULL,
  plot_height = NULL,
  plot_font_face = "Arial",
  plot_title = "",
  plot_title_font_size = 10,
  legend_position = "bottom",
  legend_font_size = 10,
  bar_transparency = 0.7,
  color_palette = c("#f8766d", "#00ba38", "#619cff"),
  show_grid_lines = TRUE,
  show_axis_lines = FALSE,
  show_x_axis = TRUE,
  show_y_axis = TRUE,
  x_axis_label = "",
  y_axis_label = "Mean",
  y_axis_breaks = 5,
  axis_text_font_size = 10,
  label_font_size = 2.5,
  label_wrap_size = 20,
  label_color = "#434343",
  error_bar_size = 0.05,
  data_label_position = 1,
  decimals = 1,
  test = "lm", 
  alpha_level = 0.05
)

# Arrange plots in grid
ggarrange(
  plot1, 
  plot1,
  labels = c("Plot 1", "Plot 2"),
  ncol = 1,
  legend = "bottom",
  common.legend = TRUE
)
```